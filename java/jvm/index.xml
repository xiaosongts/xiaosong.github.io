<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 小宋小宋?</title>
    <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/</link>
    <description>Recent content in JVM on 小宋小宋?</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 24 May 2024 15:14:01 +0800</lastBuildDate>
    <atom:link href="https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 内存区域</title>
      <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/memory-region/memory_region/</link>
      <pubDate>Fri, 24 May 2024 15:14:01 +0800</pubDate>
      <guid>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/memory-region/memory_region/</guid>
      <description>&lt;h2 id=&#34;java内存区域&#34;&gt;Java内存区域&lt;/h2&gt;&#xA;&lt;h3 id=&#34;内存区域图&#34;&gt;内存区域图&lt;/h3&gt;&#xA;&lt;p&gt;jdk1.8以前：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;jdk1.7%E5%8F%8A%E4%B9%8B%E5%89%8D.png&#34; alt=&#34;jdk1.7及之前.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;jdk1.8及以后：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;jdk1.8%E4%B9%8B%E5%90%8E.png&#34; alt=&#34;jdk1.8之后.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;对于线程和进程的职责：&lt;/p&gt;&#xA;&lt;p&gt;线程独有&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序计数器、本地方法栈、虚拟机栈&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;线程共享&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;堆区、元空间&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;程序计数器&#34;&gt;程序计数器&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在计组中，PC为控制器里面的一部分，它记录的是下一个指令所在的地址，用于指令跳转&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在java中&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录的是&lt;code&gt;当前线程正在执行的字节码的指令地址&lt;/code&gt;，也就是行号&lt;/li&gt;&#xA;&lt;li&gt;因为在多线程的情况下，每一个线程都会有自己的程序计数器，然后在线程切换的时候，用于恢复现场，继续执行&lt;/li&gt;&#xA;&lt;li&gt;程序计数器是一个很小的内存空间，它仅仅记录的是一个指针&lt;/li&gt;&#xA;&lt;li&gt;线程私有的，生命周期跟随线程&lt;/li&gt;&#xA;&lt;li&gt;是唯一一个没有OOME的区域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;虚拟机栈&#34;&gt;虚拟机栈&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;栈&lt;/code&gt;是一个先进后出的数据结构，这就符合方法的递归调用的应用，一个方法调用另一个方法，这就符合栈的特性&lt;/li&gt;&#xA;&lt;li&gt;在java中，虚拟机栈应用在&lt;code&gt;存储方法调用使的局部变量、操作数等信息&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;异常&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;StackOverflowError&lt;/code&gt;：方法调用太深，虚拟机栈太深&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;OutOfMemoryError&lt;/code&gt;：虚拟机栈申请不到内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;如图：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;stack.png&#34; alt=&#34;stack.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;局部变量表&#34;&gt;局部变量表&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储方法的形参、方法内的局部变量，每一个局部变量有一个索引值，用于快速访问&lt;/li&gt;&#xA;&lt;li&gt;局部变量必须初始化才能使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;操作栈&#34;&gt;操作栈&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;可以回想一下&lt;code&gt;（2-3）*4&lt;/code&gt;，这个表达式的算法该怎么设计，利用两个栈，然后再利用操作符号的优先级，进行入栈、出栈的操作。还有前缀表达式、后缀表达式。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在java中&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;是字节码指令执行过程的临时存储&lt;/li&gt;&#xA;&lt;li&gt;由于局部变量表存储的是变量，而操作栈就可以动态的处理变量，进行一个中转站的使用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;动态链接&#34;&gt;动态链接&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;回想多态特性的运行时多态，方法的具体调用要到运行期间也能确定&lt;/li&gt;&#xA;&lt;li&gt;这个动态链接存储的是量池里的该方法的引用，支持调用过程中的动态链接。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;方法返回地址&#34;&gt;方法返回地址&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;要保证每一个方法执行完之后应该返回到正确的位置，接着上一个方法的执行。&lt;/li&gt;&#xA;&lt;li&gt;此时的操作就是弹出当前栈顶的栈帧&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;本地方法栈&#34;&gt;本地方法栈&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;和虚拟机栈类似，不过本地方法栈记录的是&lt;code&gt;native&lt;/code&gt;方法的信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;native方法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用于在jvm上调用操作系统层面的方法，由c++/c语言编写的&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;堆区heap&#34;&gt;堆区（heap）&lt;/h3&gt;&#xA;&lt;p&gt;在该区域中，主要用来存放&lt;code&gt;对象实例&lt;/code&gt;，也是垃圾收集器的主要工作区域。&lt;/p&gt;&#xA;&lt;p&gt;分代回收算法，越老的区，垃圾回收频率越低（使用次数晋升）堆区划分：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;新生代&lt;/li&gt;&#xA;&lt;li&gt;老年代&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;逃逸分析&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果某些方法中的对象引用没有被返回（return）或者未被外面使用（也就是未逃逸出去），那么对象可以直接在栈上分配内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;字符串常量池&#34;&gt;字符串常量池&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;因为在程序中字符串的使用占大量，所以单独开辟一个区域用于快速访问内存中字符串变量的信息。&lt;/li&gt;&#xA;&lt;li&gt;字符串常量池可以看作是一个map，其中value用于映射堆区中的地址&lt;/li&gt;&#xA;&lt;li&gt;它的实现是一个stringtable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;历史&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;jdk1.7以前，是在永久代中&lt;/li&gt;&#xA;&lt;li&gt;jdk1.7及以后，移动到堆区中了&lt;/li&gt;&#xA;&lt;li&gt;为什么：在永久代中垃圾回收效率低，没有堆区GC效率高&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;方法区&#34;&gt;方法区&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法区是一个概念，它是一个逻辑区域，在运行时，需要读取各种类的信息，如字段信息、方法信息、常量、静态变量等等，方法区就是把这些信息划分出来的一个单独区域。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;永久代、元空间&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;它俩是方法区的实现方式&lt;/li&gt;&#xA;&lt;li&gt;永久代是在jvm运行时内存区域，然后容易OOM&lt;/li&gt;&#xA;&lt;li&gt;元空间是在本地内存上的实现&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;运行时常量池&#34;&gt;运行时常量池&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用来存储class文件中的各种&lt;code&gt;字面量&lt;/code&gt;和&lt;code&gt;符号引用&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;它相当于是class文件常量池在内存中的映射&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;字面量：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Class文件</title>
      <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/class/class/</link>
      <pubDate>Fri, 24 May 2024 15:14:01 +0800</pubDate>
      <guid>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/class/class/</guid>
      <description>&lt;h1 id=&#34;字节码&#34;&gt;字节码&lt;/h1&gt;&#xA;&lt;p&gt;字节码即java跨平台的重要支撑点，它是一个&lt;code&gt;.class&lt;/code&gt;文件，通过一个编译器生成的。平常的&lt;code&gt;.java&lt;/code&gt;文件，还有Kotlin的&lt;code&gt;.kt&lt;/code&gt;文件，它们如果都遵循编译规则，生成字节码文件，都是可以运行在JVM上的。&lt;!-- raw HTML omitted --&gt;&#xA;字节码的生成：在java中，它可以通过javac编译器生成，javac是一个全量式编译。&lt;!-- raw HTML omitted --&gt;&#xA;javac的使用&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;javac Main.java&lt;/li&gt;&#xA;&lt;li&gt;javac -d /opt Main.java   ，文件编译到/opt目录下面，并且生成包结构，即package语法。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;class文件&#34;&gt;Class文件&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;魔数：每个字节码文件的前4个字节都是固定的魔数0xCAFEBABE，用于标识这是一个Java字节码文件。&lt;/li&gt;&#xA;&lt;li&gt;版本信息：紧接着魔数的是版本信息，包括次版本号和主版本号，表示编译该字节码的Java编译器版本。&lt;/li&gt;&#xA;&lt;li&gt;常量池：常量池是字节码文件中资源的集合，包括文字字符串、类或接口名、字段名和其他常量。&lt;/li&gt;&#xA;&lt;li&gt;访问标志：这部分包含类的访问权限等信息。&lt;/li&gt;&#xA;&lt;li&gt;此类索引、父类索引和接口索引集合：这些索引指向常量池中相应的类和接口。&lt;/li&gt;&#xA;&lt;li&gt;字段表：包含了类中声明的变量信息。&lt;/li&gt;&#xA;&lt;li&gt;方法表：包含了类中定义的方法信息。&lt;/li&gt;&#xA;&lt;li&gt;属性表：包含了类的其他属性信息，如注解&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;类加载&#34;&gt;类加载&lt;/h1&gt;&#xA;&lt;p&gt;为什么？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;速度快&lt;/code&gt;、&lt;code&gt;安全性&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向对象，要通过类文件创建实例对象，在编写代码时，会使用到各种各样的类，多种类之间又会互联关联、依赖。&lt;/li&gt;&#xA;&lt;li&gt;jvm要读取class文件的信息，创建对应的实例对象，如果类文件放在磁盘上，jvm读取会产生磁盘I/O，性能比较低，再加上class文件可能会被修改，安全性得不到保证。&lt;/li&gt;&#xA;&lt;li&gt;所以，在需要时，将类文件加载到虚拟机的内存中，可以更快的得到类信息，而且安全性可以得到保障。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;步骤：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;classload.png&#34; alt=&#34;classload.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;加载&lt;/li&gt;&#xA;&lt;li&gt;验证&lt;/li&gt;&#xA;&lt;li&gt;准备&lt;/li&gt;&#xA;&lt;li&gt;解析&lt;/li&gt;&#xA;&lt;li&gt;初始化&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;加载&#34;&gt;加载&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过类的全限定名（包名+类名），找到&lt;code&gt;.class&lt;/code&gt;文件，然后将类的信息转为&lt;code&gt;字节流&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;将字节流&lt;code&gt;加载到内存的方法区&lt;/code&gt;，映射为jvm识别的数据结构&lt;/li&gt;&#xA;&lt;li&gt;在内存中生成一个代表该类的&lt;code&gt; java.lang.Class 对象&lt;/code&gt;，作为方法区这些数据的访问入口&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;连接&#34;&gt;连接&lt;/h2&gt;&#xA;&lt;h3 id=&#34;验证&#34;&gt;验证&lt;/h3&gt;&#xA;&lt;p&gt;验证是连接阶段的第一步，这一阶段的目的是确保 &lt;code&gt;Class 文件的字节流&lt;/code&gt;中包含的信息符合《Java 虚拟机规范》的全部&lt;code&gt;约束要求&lt;/code&gt;，保证这些信息被当作代码运行后&lt;code&gt;不会危害虚拟机&lt;/code&gt;自身的安全。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字节码文件格式验证：验证文件是否能够正确的加载到方法区中，&lt;/li&gt;&#xA;&lt;li&gt;元数据验证：进行语义分析，确保类的元数据（如类名、父类、接口等）正确&lt;/li&gt;&#xA;&lt;li&gt;字节码验证：针对程序，验证程序的语义是否符合逻辑&lt;/li&gt;&#xA;&lt;li&gt;符号引用验证：验证符号引用指向方法区中的对象是否存在&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;准备&#34;&gt;准备&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;该阶段是为类变量（static变量）分配内存，并设置初始值&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个阶段仅仅分配类变量&lt;/li&gt;&#xA;&lt;li&gt;分配到 &lt;code&gt;方法区&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;jdk1.7以前，是在方法区中（永久代），内存还是jvm内存&lt;/li&gt;&#xA;&lt;li&gt;jdk1.7及以后，是在方法区中（元空间），但是此时将字符串常量池、类变量都移动到&lt;code&gt;堆区&lt;/code&gt;中了，类变量跟随&lt;code&gt;加载阶段&lt;/code&gt;创建的Class对象，放在堆中&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;类型&lt;/th&gt;&#xA;          &lt;th&gt;默认值&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;int&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;long&lt;/td&gt;&#xA;          &lt;td&gt;0L&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;short&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;char&lt;/td&gt;&#xA;          &lt;td&gt;&amp;lsquo;\u0000&amp;rsquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;byte&lt;/td&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;boolean&lt;/td&gt;&#xA;          &lt;td&gt;flase&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;float&lt;/td&gt;&#xA;          &lt;td&gt;0.0f&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;double&lt;/td&gt;&#xA;          &lt;td&gt;0.0d&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;refrence引用类型&lt;/td&gt;&#xA;          &lt;td&gt;null&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;解析&#34;&gt;解析&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;这阶段主要是将常量池中的符号引用转为直接引用&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>对象</title>
      <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/object/jvm_object/</link>
      <pubDate>Fri, 24 May 2024 15:14:01 +0800</pubDate>
      <guid>https://github.com/yushan-blog/xiaosong.github.io.git/java/jvm/object/jvm_object/</guid>
      <description>&lt;h2 id=&#34;对象&#34;&gt;对象&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对象，在java中有很多很多对象，在代码中，此对象调用另一个对象，这个对象又执行了它的方法。这时候就要了解，此对象长什么样，以及它又如何调用方法，使用属性的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;对象的创建流程&#34;&gt;对象的创建流程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;类加载检查&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对象是类的实例，类是对象的模板。&lt;/li&gt;&#xA;&lt;li&gt;创建对象，首先要检查对应的&lt;strong&gt;类是否加载完成并且初始化&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;如果没有，就要进行类的加载过程。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;分配内存空间&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在类加载检查通过后，就可以分配内存空间了&lt;/li&gt;&#xA;&lt;li&gt;空间的大小由类加载完成后确定&lt;/li&gt;&#xA;&lt;li&gt;分配方式：&lt;code&gt;指针碰撞&lt;/code&gt;、&lt;code&gt;空闲列表&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;初始化零值&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在类中，实例属性可以不初始化，在创建对象后就会有默认值可以使用，就是这一步的原因&lt;/li&gt;&#xA;&lt;li&gt;这一步进行初始化对象布局里的&lt;code&gt;实例数据&lt;/code&gt;，不包括&lt;code&gt;对象头&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;设置对象头&#xA;&lt;ol&gt;&#xA;&lt;li&gt;由虚拟机设置该对象的信息。&lt;/li&gt;&#xA;&lt;li&gt;如对象的哈希码、GC状态、锁信息、分代年龄、线程ID等重要信息&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;执行init方法&#xA;&lt;ol&gt;&#xA;&lt;li&gt;当创建对象是通过构造器的话，会执行这一步骤，用来进行自定义的初始化工作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;分配空间方式及问题&#34;&gt;分配空间方式及问题&lt;/h3&gt;&#xA;&lt;p&gt;采用那种方式取决于 &lt;code&gt;Java 堆是否规整&lt;/code&gt;，而&lt;code&gt; Java 堆是否规整&lt;/code&gt;又取决于采用的&lt;code&gt;垃圾收集器是否带有压缩整理功能&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;指针碰撞：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适用于堆规整，将&lt;code&gt;已使用的内存&lt;/code&gt;和&lt;code&gt;未使用的内存&lt;/code&gt;分成两部分，当一个对象需要分配空间时，通过它的大小，将指针移动到&lt;code&gt;未使用的内存&lt;/code&gt;那边&lt;/li&gt;&#xA;&lt;li&gt;使用该分配方式的 GC 收集器：Serial, ParNew&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;空闲列表&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;适用于堆不规整，此时就要维护一个列表，记录内存的空间状态&lt;/li&gt;&#xA;&lt;li&gt;通过对象的大小，找一块区域分配即可&lt;/li&gt;&#xA;&lt;li&gt;使用该分配方式的 GC 收集器：CMS&lt;/li&gt;&#xA;&lt;li&gt;内存碎片的问题，是有垃圾收集器的算法处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;问题&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个类可以有多个实例，但是当一个实例遇见多个线程同时创建，会遇见并发问题&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;解决&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CAS：比较和交换，这是一种乐观锁的方法，假设当前没有问题，等处理完毕，比较一下，不相等了，就重试了&lt;/li&gt;&#xA;&lt;li&gt;TLAB：（Thread Local Allocation Buffer），是线程专有的一块区域，它使线程不共享公共区域，减少竞争。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;它是在堆区中Eden区域的一小部分，适合在线程上分配较小的对象，当遇见较大的对象，空间不够时，还会在堆区上分配对象空间，继续采用CAS操作分配。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;对象的内存布局&#34;&gt;对象的内存布局&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对象头：第一部分用于存储&lt;code&gt;对象自身的运行时数据&lt;/code&gt;（哈希码、GC 分代年龄、锁状态标志等等）；另一部分是&lt;code&gt;类型指针&lt;/code&gt;，即&lt;code&gt;对象指向它的类元数据的指针&lt;/code&gt;，虚拟机通过这个指针来确定这个对象是哪个类的实例。&lt;/li&gt;&#xA;&lt;li&gt;实例数据：对象的数据，包括父类的属性、本身的属性&lt;/li&gt;&#xA;&lt;li&gt;对齐填充：jvm要求对象的大小是8的倍数，当对象的实例数据不够8的倍数，就需要填充占位符对齐了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;对象头&#34;&gt;对象头&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;Markword&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;记录对象的信息，如哈希值、线程ID、分代年龄、锁的状态&lt;/li&gt;&#xA;&lt;li&gt;在32位系统占4字节，在64位系统中占8字节&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;markword.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;32位jvm&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;无锁时（正常对象）：hashcode占据 25bit，分代年龄4bit，偏向锁标识 1bit，锁的状态 2bit&lt;/li&gt;&#xA;&lt;li&gt;偏向锁对象：线程ID 23bit，epoch 2bit，分代年龄4bit，偏向锁标识 1bit，锁的状态 2bit。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;此时当对象持有对象的偏向锁时，无需使用原子操作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;CMS（concurrent mark sweep）：是一个垃圾回收器&lt;/li&gt;&#xA;&lt;li&gt;轻量级锁状态：前30bit，指向栈中锁记录的指针&lt;/li&gt;&#xA;&lt;li&gt;重量级锁状态：锁膨胀，前30bit，指向对象的监视器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;64位jvm&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
