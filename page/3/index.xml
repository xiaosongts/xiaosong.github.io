<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小宋小宋?</title>
    <link>https://github.com/yushan-blog/xiaosong.github.io.git/</link>
    <description>Recent content on 小宋小宋?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Fri, 25 Oct 2024 12:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://github.com/yushan-blog/xiaosong.github.io.git/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>主从复制</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/database/master_slave/</link>
        <pubDate>Fri, 25 Oct 2024 12:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/database/master_slave/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/database/master_slave/ -&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;主从复制是 MySQL 数据库管理系统（MySQL Database Management System，MySQL DBMS）中一个非常常用的功能，它允许一个数据库服务器作为主服务器，另一个数据库服务器作为从服务器，主服务器的数据会被复制到从服务器，从而实现数据的备份和容灾。&lt;/p&gt;
&lt;p&gt;主从交接的数据：二进制日志文件（Binary Log），主服务器的所有修改操作都会记录在这个日志文件中，通过将日志文件传送给从服务器，从服务器用来执行这个日志文件，就可以实现数据的同步功能。&lt;/p&gt;
&lt;p&gt;这点和Redis的主从相似，其中都会涉及到日志文件的当前位置，记录主从数据的差异点，进行数据同步，因为不可能每次都进行全量同步。&lt;/p&gt;
&lt;h2 id=&#34;先上手使用&#34;&gt;先上手使用&lt;/h2&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/database/master_slave/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>事项</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/she/</link>
        <pubDate>Tue, 01 Oct 2024 00:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/she/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/she/ -&lt;p&gt;每周一和周五早班，周二周三晚班，周四轮着来(11.7早班)&lt;/p&gt;
&lt;p&gt;3.18
4.30
5.30
7.10
8.12
9.1
9.29
11.2&lt;/p&gt;
&lt;p&gt;1.香辣鸡爪
2.可乐鸡翅
3.黑黑糖醋排骨
4.青椒炒肉
5.炒包菜
6.回锅肉&lt;/p&gt;
&lt;p&gt;1.小笼包
2.蒜蓉虾
3.虎皮鸡爪
4.年糕排骨
5.炸酱面
6.辣炒年糕
7.番茄疙瘩汤
8.老妈蹄花&lt;/p&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/she/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>jasypt</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/jasypt/</link>
        <pubDate>Wed, 18 Sep 2024 09:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/jasypt/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/jasypt/ -&lt;h2 id=&#34;spring中使用&#34;&gt;Spring中使用&lt;/h2&gt;
&lt;p&gt;在 Spring 中注册 jasypt bean 没有什么特别的，因为 jasypt 中的所有加密工具(digester 和加密器)都有足够的设计，可以从 Spring 应用程序上下文正确地实例化和依赖注入。&lt;/p&gt;
&lt;p&gt;1、依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.jasypt&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jasypt-spring4&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.9.3&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2、在spring配置文件中配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;environmentVariablesConfiguration&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		  &lt;span style=&#34;color:#658b00&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;algorithm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;PBEWithMD5AndDES&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cdf_So@2024&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;configurationEncryptor&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		  &lt;span style=&#34;color:#658b00&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jasypt.encryption.pbe.StandardPBEStringEncryptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;environmentVariablesConfiguration&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;bean&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;propertyConfigurer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		  &lt;span style=&#34;color:#658b00&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;org.jasypt.spring4.properties.EncryptablePropertyPlaceholderConfigurer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;constructor-arg&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;configurationEncryptor&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;locations&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;classpath:jdbc.properties&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;classpath:redis.properties&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;classpath:config.properties&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;classpath:xxl-job-executor.properties&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/list&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://github.com/yushan-blog/xiaosong.github.io.git/posts/jasypt/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>相关信息</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/infos/info/</link>
        <pubDate>Sat, 14 Sep 2024 12:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/java/infos/info/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/java/infos/info/ -&lt;h2 id=&#34;基本信息&#34;&gt;基本信息&lt;/h2&gt;
&lt;p&gt;查看电脑上Java的配置信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -XshowSettings:properties -version
Property settings:
    file.encoding = UTF-8
    file.separator = /
    java.class.path =
    java.class.version = 61.0
    java.home = /usr/lib/jvm/java-17-openjdk-amd64
    java.io.tmpdir = /tmp
    java.library.path = /usr/java/packages/lib
        /usr/lib/x86_64-linux-gnu/jni
        /lib/x86_64-linux-gnu
        /usr/lib/x86_64-linux-gnu
        /usr/lib/jni
        /lib
        /usr/lib
    java.runtime.name = OpenJDK Runtime Environment
    java.runtime.version = 17.0.12+7-Debian-2deb12u1
    java.specification.name = Java Platform API Specification
    java.specification.vendor = Oracle Corporation
    java.specification.version = 17
    java.vendor = Debian
    java.vendor.url = https://tracker.debian.org/openjdk-17
    java.vendor.url.bug = https://bugs.debian.org/openjdk-17
    java.version = 17.0.12
    java.version.date = 2024-07-16
    java.vm.compressedOopsMode = Zero based
    java.vm.info = mixed mode, sharing
    java.vm.name = OpenJDK 64-Bit Server VM
    java.vm.specification.name = Java Virtual Machine Specification
    java.vm.specification.vendor = Oracle Corporation
    java.vm.specification.version = 17
    java.vm.vendor = Debian
    java.vm.version = 17.0.12+7-Debian-2deb12u1
    jdk.debug = release
    line.separator = \n
    native.encoding = UTF-8
    os.arch = amd64
    os.name = Linux
    os.version = 4.4.0-19041-Microsoft
    path.separator = :
    sun.arch.data.model = 64
    sun.boot.library.path = /usr/lib/jvm/java-17-openjdk-amd64/lib
    sun.cpu.endian = little
    sun.io.unicode.encoding = UnicodeLittle
    sun.java.launcher = SUN_STANDARD
    sun.jnu.encoding = UTF-8
    sun.management.compiler = HotSpot 64-Bit Tiered Compilers
    sun.stderr.encoding = UTF-8
    sun.stdout.encoding = UTF-8
    user.country = US
    user.dir = /home/yushan
    user.home = /home/yushan
    user.language = en
    user.name = yushan

openjdk version &amp;#34;17.0.12&amp;#34; 2024-07-16
OpenJDK Runtime Environment (build 17.0.12+7-Debian-2deb12u1)
OpenJDK 64-Bit Server VM (build 17.0.12+7-Debian-2deb12u1, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;- https://github.com/yushan-blog/xiaosong.github.io.git/java/infos/info/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>安装与配置</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/setup/</link>
        <pubDate>Mon, 29 Jul 2024 12:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/setup/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/setup/ -&lt;h2 id=&#34;jdk&#34;&gt;JDK&lt;/h2&gt;
&lt;p&gt;linux下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从Oracle官网下载jdk&lt;/li&gt;
&lt;li&gt;上传至指定目录中，如&lt;code&gt;/usr/local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解压压缩包&lt;code&gt;tar -zxvf jdk-8u202-linux-x64.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;code&gt;vim /etc/profile&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;JAVA_HOME&lt;/span&gt;=/usr/local/jdk1.8.0_202
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;JRE_HOME&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/jre
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;CLASSPATH&lt;/span&gt;=.:&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/lib/dt.jar:&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/lib/tools.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;PATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/bin:&lt;span style=&#34;color:#00688b&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查JDK是否安装成功&lt;code&gt;java -version&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;maven&#34;&gt;Maven&lt;/h2&gt;
&lt;p&gt;linux下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从官网&lt;a href=&#34;https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/&#34;&gt;Maven&lt;/a&gt;下载压缩包&lt;/li&gt;
&lt;li&gt;上传到指定目录中，如&lt;code&gt;/usr/local&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解压压缩包&lt;code&gt;tar -zxvf maven-3.6.3-bin.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;code&gt;vim /etc/profile&lt;/code&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;MAVEN_HOME&lt;/span&gt;=/usr/local/maven-3.6.3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;PATH&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#00688b&#34;&gt;MAVEN_HOME&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;}&lt;/span&gt;/bin:&lt;span style=&#34;color:#00688b&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;配置settings.xml
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 修改本地仓库地址 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;localRepository&amp;gt;&lt;/span&gt;/usr/local/maven-repository&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/localRepository&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;mirrors&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 配置阿里云仓库 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;mirror&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;aliyunmaven&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;mirrorOf&amp;gt;&lt;/span&gt;*&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/mirrorOf&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;aliyun nexus&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://maven.aliyun.com/repository/public&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/mirror&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/mirrors&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;source /etc/profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查Maven是否安装成功&lt;code&gt;mvn -v&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/setup/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>windows下操作</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/windows/</link>
        <pubDate>Fri, 26 Jul 2024 16:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/windows/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/windows/ -&lt;h2 id=&#34;端口和进程&#34;&gt;端口和进程&lt;/h2&gt;
&lt;p&gt;查看端口的占用和进程，并且kill进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netstat -ano | findstr &lt;span style=&#34;color:#b452cd&#34;&gt;6379&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tasklist | findstr redis-server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;taskkill /F /PID &lt;span style=&#34;color:#b452cd&#34;&gt;1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;taskkill /F /IM redis-server.exe
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;wsl&#34;&gt;wsl&lt;/h2&gt;
&lt;p&gt;wsl是windows下的linux子系统，可以安装各种linux系统，比如ubuntu，centos，debian等等。
wsl的安装和卸载，可以参考&lt;a href=&#34;https://docs.microsoft.com/zh-cn/windows/wsl/install&#34;&gt;wsl&lt;/a&gt;。
wsl的配置，可以参考&lt;a href=&#34;https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config&#34;&gt;wsl配置&lt;/a&gt;。&lt;/p&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/windows/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Java开发规范</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/java-standard/</link>
        <pubDate>Fri, 26 Jul 2024 09:00:00 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/java-standard/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/java-standard/ -&lt;h2 id=&#34;规范&#34;&gt;规范&lt;/h2&gt;
&lt;p&gt;通过学习阿里巴巴开源的Java开发规范，学习到一些编程规范，通过编程规范，让开发小组提高开发效率，减少bug，提高代码质量。&lt;/p&gt;
&lt;h2 id=&#34;名称&#34;&gt;名称&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类名大驼峰：&lt;code&gt;UserInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量名小驼峰：&lt;code&gt;user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;常量名全大写：&lt;code&gt;USER_INFO_DICT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;布尔型不要写is：&lt;code&gt;isDeleted&lt;/code&gt; -&amp;gt; &lt;code&gt;deleted&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于MVC中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service层命名：&lt;code&gt;UserInfoService&lt;/code&gt;，且在应用中暴露的都是Service接口&lt;/li&gt;
&lt;li&gt;Service实现类命名：&lt;code&gt;UserInfoServiceImpl&lt;/code&gt;，以&lt;code&gt;impl&lt;/code&gt;结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service/DAO 层方法命名规约&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取单个对象的方法用 get 做前缀。&lt;/li&gt;
&lt;li&gt;获取多个对象的方法用 list 做前缀。&lt;/li&gt;
&lt;li&gt;获取统计值的方法用 count 做前缀。&lt;/li&gt;
&lt;li&gt;插入的方法用 save/insert 做前缀。&lt;/li&gt;
&lt;li&gt;删除的方法用 remove/delete 做前缀。&lt;/li&gt;
&lt;li&gt;修改的方法用 update 做前缀。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;领域模型命名规约&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据对象：xxxDO，xxx 即为数据表名。&lt;/li&gt;
&lt;li&gt;数据传输对象：xxxDTO，xxx 为业务领域相关的名称。&lt;/li&gt;
&lt;li&gt;展示对象：xxxVO，xxx 一般为网页名称。&lt;/li&gt;
&lt;li&gt;POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。&lt;/li&gt;
&lt;/ol&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/java-standard/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Git</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/git/</link>
        <pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/git/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/git/ -&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;需求：若是编辑一个文件时，想去保留每次修改的版本，以便当想去回滚版本的时候，也就是这次修改的不行，想要去使用以前的版本，所以，最常见的就是每次修改都另存为一个新文件，这种方法简单，但是繁琐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发展历史&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地化版本控制系统&lt;/li&gt;
&lt;li&gt;集中式版本控制系统：多个主机使用一个中央服务器的版本数据库，容易单点故障，出现故障的时候，多个主机无法工作&lt;/li&gt;
&lt;li&gt;分布式版本控制系统&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;（分布式版本控制系统）&lt;/p&gt;
&lt;p&gt;Git由Linus Torvalds开发，用于在linux系统项目中使用。Git是建立一个仓库，这个仓库可以存储好多文件并进行管理，而且是直接存储&lt;code&gt;文件快照&lt;/code&gt;，也就是每个主机都有文件的备份，可以解决集中式版本控制系统的单点故障问题。&lt;/p&gt;
&lt;p&gt;也就是说，当文件被更改的时候，新的版本记录的是最新的全量文件，而不是记录修改的差异，而且没有修改的文件则是链接，链接到上个版本文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;snapshots.png&#34; alt=&#34;快照&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;仓库中文件状态&#34;&gt;仓库中文件状态&lt;/h2&gt;
&lt;p&gt;仓库中有很多文件，每种文件都有不同的状态，有新建的、修改的、完成的，在Git中，可以理解为仓库中有箱子将这些不同状态的文件区分出来，需要人工手动地将文件移动到其他箱子，从而改变文件的状态。&lt;/p&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;已修改&lt;/code&gt;：是指目前文件内容和仓库记录该文件的内容不一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;已暂存&lt;/code&gt;：是指记录了文件可以更新了，以便更新到仓库中记录的最新内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;已提交&lt;/code&gt;：是指文件在仓库中已经是最新内容，安全的保存成功&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来分，所有的文件都是两个状态&lt;code&gt;未跟踪&lt;/code&gt;和&lt;code&gt;已跟踪&lt;/code&gt;，未跟踪的文件是不属于仓库管理的文件，比如你新建一个文件的时候，这个文件就属于未跟踪状态，只有在使用命令&lt;code&gt;git add&lt;/code&gt;将文件移动到暂存区，才会变成已跟踪状态。已跟踪状态则是已经提交和已经修改，已提交的文件是安全的保存在仓库中，已修改的文件是修改了，但是还没有提交（commit）到仓库中。&lt;/p&gt;
&lt;p&gt;所以，根据文件的状态可以将仓库划分三个区域，&lt;code&gt;工作区&lt;/code&gt;、&lt;code&gt;暂存区&lt;/code&gt;、&lt;code&gt;git仓库&lt;/code&gt;；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区：是Git仓库压缩出来的一部分，以便用户可以修改这些文件&lt;/li&gt;
&lt;li&gt;暂存区：是一个文件，记录需要提交的修改后的文件&lt;/li&gt;
&lt;li&gt;Git仓库：是最终的数据库，保存的都是最新的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;areas.png&#34; alt=&#34;区域&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装和配置&#34;&gt;安装和配置&lt;/h2&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置用户名和邮箱，因为在提交代码的时候，需要记录提交者的信息&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.name &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yushan song&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global user.email &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yushan.song@gmail.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--global&lt;/code&gt;，这个是全局配置，如果只对当前仓库生效，则不需要加&lt;/p&gt;
&lt;h2 id=&#34;基础&#34;&gt;基础&lt;/h2&gt;
&lt;p&gt;仓库：将整个文件夹变为一个仓库进行管理文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地仓库：如果仅仅个人使用，利用Git的优点管理自己的文件，可以将文件夹变为一个仓库，然后自己进行操作
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;远程仓库：一般用于多人协作开发一个工程，或者自己推送到软件项目托管平台，以供别人访问及使用
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地仓库内文件操作：&lt;/p&gt;
&lt;p&gt;状态：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以查看当前仓库的文件状态，比如你修改了什么，新增了什么，删除了什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;添加至暂存区(stage)：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add &amp;lt;file&amp;gt;/&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将未跟踪的文件进行跟踪，将已跟踪且修改的文件添加到暂存区&lt;/li&gt;
&lt;li&gt;将文件添加到暂存区，精确的说：“是将文件添加到下一个版本中”，每次add都是创建一个新版本，但是暂存区中只有一个版本，所以每次add都是覆盖之前的版本。&lt;/li&gt;
&lt;li&gt;比如，当出现&lt;code&gt;Untracked files&lt;/code&gt;这个信息，就表示有未跟踪文件（新增的），就可以使用这个命令将其添加到暂存区，交由git管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;提交到仓库：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;message&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将暂存区的文件提交到仓库中，提交之后，这个文件就变成了&lt;code&gt;已提交状态&lt;/code&gt;，可以理解为这个文件是安全的保存在仓库中，可以提交到远程仓库中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;分支&#34;&gt;分支&lt;/h2&gt;
&lt;p&gt;主分支和其他分支&lt;/p&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/git/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>终端</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/posts/bash/</link>
        <pubDate>Fri, 24 May 2024 15:14:11 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/posts/bash/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/posts/bash/ -&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;简单的概念就是linux是一个内核，然后需要一个shell来和linux内核打交道，bash就是shell的一种，其他的还有ksh,zsh,sh，和用户打交道的就是终端，它来接收用户输入的信息，传递到使用的bash里，终端比如konsole,zutty,terminator，很多……&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终端：人机接口的工具，输入shell命令的工具，如konsole，zutty&lt;/li&gt;
&lt;li&gt;bash：是shell的一种类型，其他的还有zsh ，sh ，dash&lt;/li&gt;
&lt;li&gt;shell：是“壳”的意思，是在计算机内核之上套了一层，用来接收用户指令的界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shell&#34;&gt;shell&lt;/h2&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形界面shell：如linux的ghome， kde，&lt;/li&gt;
&lt;li&gt;命令式shell：如sh/bash/zsh/ksh&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;交互式和非交互式&#34;&gt;交互式和非交互式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;交互式shell：是与用户交互的，等待用户输入的命令的shell，&lt;/li&gt;
&lt;li&gt;非交互式shell：是以脚本运行的，比如编写一个&lt;code&gt;start.sh&lt;/code&gt;，就可以用bash工具运行它&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;登录式和非登录式&#34;&gt;登录式和非登录式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这个是根据两种shell所读取的配置文件不同而区分的&lt;/li&gt;
&lt;li&gt;登录式shell：当第一次登录linux系统时，分配的shell就是登录shell，还有在终端使用&lt;code&gt;su&lt;/code&gt;命令登录后，只能使用&lt;code&gt;logout&lt;/code&gt;命令退出的就是登录式shell，比如使用虚拟机时没有安装GUI，那个使用root提示的就是登录shell，还有ssh远程连接时，那个也是登录shell，读取文件：
&lt;ol&gt;
&lt;li&gt;/etc/profile&lt;/li&gt;
&lt;li&gt;/etc/profile.d/*.sh&lt;/li&gt;
&lt;li&gt;~/.bash_profile&lt;/li&gt;
&lt;li&gt;~/.bashrc&lt;/li&gt;
&lt;li&gt;/etc/bashrc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;非登录式shell：和用户无关的shell，比如在linux系统里，使用终端打开的shell，那是非登录的，它读取的文件是不一样的。
&lt;ol&gt;
&lt;li&gt;~/.bashrc&lt;/li&gt;
&lt;li&gt;/etc/bashrc&lt;/li&gt;
&lt;li&gt;/etc/profile.d/*.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;判断&#34;&gt;判断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要进行测试的话，在每个文件内添加&lt;code&gt;echo&lt;/code&gt;命令就可&lt;/li&gt;
&lt;li&gt;判断是哪个shell，-bash是登录式shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;shell.png&#34; alt=&#34;shell.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/posts/bash/ - This is a customized copyright.</description>
        </item>
    
    
    
        <item>
        <title>Java基础知识</title>
        <link>https://github.com/yushan-blog/xiaosong.github.io.git/java/basic/basicknowledge/java_basic/</link>
        <pubDate>Fri, 24 May 2024 15:14:01 +0800</pubDate>
        
        <guid>https://github.com/yushan-blog/xiaosong.github.io.git/java/basic/basicknowledge/java_basic/</guid>
        <description>小宋小宋? https://github.com/yushan-blog/xiaosong.github.io.git/java/basic/basicknowledge/java_basic/ -&lt;h2 id=&#34;面向对象和面向过程&#34;&gt;面向对象和面向过程&lt;/h2&gt;
&lt;p&gt;面向对象 OOP：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将现实世界的实体所拥有的状态和行为封装成一个类，以面向这个实体的方式进行程序构建，在实体的主观感受操作。&lt;/li&gt;
&lt;li&gt;通过对象来描述现实世界中的实体以及它们之间的交互关系。&lt;/li&gt;
&lt;li&gt;状态-&amp;gt;属性&lt;/li&gt;
&lt;li&gt;行为-&amp;gt;方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;面向过程 PP：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主要强调的是程序执行的流程，以函数和数据结构为基础进行编程&lt;/li&gt;
&lt;li&gt;程序量比较大时程序难以维护&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面向对象三大特性&#34;&gt;面向对象三大特性&lt;/h2&gt;
&lt;h3 id=&#34;继承&#34;&gt;继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果多个实体有共同的状态和行为，可以将这些共同的状态和行为提取出来，然后形成一个单独的实体，那些实体可以继承这个新的实体，达到复用的目的，而且容易维护。&lt;/li&gt;
&lt;li&gt;阻止继承：类使用final关键字声明，之后这个类不能被继承，然后方法也自动是final方法。&lt;/li&gt;
&lt;li&gt;继承：是实现了类之间的 is-a 关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;封装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;信息隐藏，形式上是将对象的数据和行为组合在一个类中，并且对使用者隐藏具体的实现细节&lt;/li&gt;
&lt;li&gt;重要：程序只能通过对象的方法才能和对象的数据进行交互，使用者是看不见数据的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多态&#34;&gt;多态&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指一个对象有多种状态，主要分为编译时多态，运行时多态&lt;/li&gt;
&lt;li&gt;编译时多态：方法的重载&lt;/li&gt;
&lt;li&gt;运行时多态：程序中定义的&lt;code&gt;对象&lt;/code&gt;引用所指向的&lt;code&gt;具体类型&lt;/code&gt;在运行期间才确定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对象的方法调用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定对象的实际类型&lt;/li&gt;
&lt;li&gt;匹配方法&lt;/li&gt;
&lt;li&gt;采用动态绑定/静态绑定
&lt;ol&gt;
&lt;li&gt;静态绑定：构造器、private、static和final方法，这些方法编译器能够明确，称为静态绑定&lt;/li&gt;
&lt;li&gt;动态绑定：除了以上，必须采用动态绑定， 虚拟机必须调用与 a对象引用的实际类型对应的方法，如果在实际类型没有找到，必须在超类中调用，但是这个过程慢，所以虚拟机生成方法表，列出所有方法的签名和要调用的实际方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;调用方法，从方法表（虚拟机加载一个类时创建）中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如下：
Manager  继承 Employee
当一个 manager 对象调用getName方法时，直接查表就知道该调用哪个方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Employee&lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;salary;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;getName&lt;/span&gt;(){&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;getSalary&lt;/span&gt;(){&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;salary;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;方法表大概为&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;Employee&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;getName&lt;span style=&#34;color:#bbb&#34;&gt;	  	&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Employee.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;getSalary&lt;span style=&#34;color:#bbb&#34;&gt; 	&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Employee.&lt;span style=&#34;color:#658b00&#34;&gt;getSalary&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Manager&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Employee{&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;getName&lt;/span&gt;(){&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;getId&lt;/span&gt;(){&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;方法表大概为&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;Manager&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;getName&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Manager.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;getId&lt;span style=&#34;color:#bbb&#34;&gt;		&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Manager.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;getSalary&lt;span style=&#34;color:#bbb&#34;&gt; 	&lt;/span&gt;-&amp;gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Employee.&lt;span style=&#34;color:#658b00&#34;&gt;getSalary&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;接口和抽象类&#34;&gt;接口和抽象类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;概念上
&lt;ul&gt;
&lt;li&gt;接口：强调的是对象的行为，强调类应该做什么，比如一个接口里有一个跑步的行为，然后一个类实现了这个接口，那么就代表这个类具有的跑步的行为。&lt;/li&gt;
&lt;li&gt;抽象类：强调代码复用，定义一种通用的模板，提供一些共性的状态和行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用上
&lt;ul&gt;
&lt;li&gt;接口：interface关键字，方法都是 public abstract，常量都是public static final且必须有默认值&lt;/li&gt;
&lt;li&gt;抽象类：abstract关键字，可以有实例方法和抽象方法，抽象方法必须无实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共同
&lt;ul&gt;
&lt;li&gt;都不能被实例化&lt;/li&gt;
&lt;li&gt;都可以有default方法&lt;/li&gt;
&lt;li&gt;都可以有抽象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;
&lt;p&gt;byte、short、int、long、float、double 、char&lt;!-- raw HTML omitted --&gt;
1、2、4、8、4、8 、2&lt;/p&gt;
&lt;p&gt;boolean&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个boolean变量占用的是4个字节，因为在存储的时候使用的是int&lt;/li&gt;
&lt;li&gt;boolean数组，每个元素占用1个字节，因为在存储的时候，虚拟机会转换为byte数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象的比较&#34;&gt;对象的比较&lt;/h2&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当是基本类型的时候，比较的是值&lt;/li&gt;
&lt;li&gt;当是引用类型的时候，比较的是引用地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;equals&#34;&gt;equals()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这是一个方法，默认Object的是比较引用地址&lt;/li&gt;
&lt;li&gt;由于每一个类都默认是Object的子类，所以可以重写这个方法，自定义相等的逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重写要符合的规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自反性：x.equals(x)应该返回true，也就是除了null之外，自身应该与自身相等&lt;/li&gt;
&lt;li&gt;对称性：对于x，y。x.equals(y)应该和y.equals(x)的返回值相等&lt;/li&gt;
&lt;li&gt;传递性：对于x，y，z。x.equals(y)、y.equals(z)的返回值为true，x.equals(z)也应该为true&lt;/li&gt;
&lt;li&gt;一致性：如果对象没有改变，那么反复调用返回值应该一样&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重写的技巧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先比较引用是否相等&lt;/li&gt;
&lt;li&gt;检测是否为null，为null直接返回false&lt;/li&gt;
&lt;li&gt;根据语义
&lt;ol&gt;
&lt;li&gt;如果在子类中比较语义改变了，则使用getClass()判断实际类型，实际类型相等时才进行比较。&lt;/li&gt;
&lt;li&gt;如果不变，比如只比较名字等等，采用instanceof关键字判断是否属于相同的父类即可，这里要注意递归栈溢出的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;然后在比较属性&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#008b45&#34;&gt;equals&lt;/span&gt;(Object&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;other){&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;==other)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(other==&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getClass&lt;/span&gt;()==other.&lt;span style=&#34;color:#658b00&#34;&gt;getClass&lt;/span&gt;())&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(!(other&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;OtherObject))&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;	&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//比较属性&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hashcode&#34;&gt;hashCode()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认的是由线程局部状态产生的随机数，而不是地址转换的，但是String重写了hashCode()，所以散列码可能会相同哦&lt;/li&gt;
&lt;li&gt;地址转换的code需要通过VM参数设置&lt;code&gt; -XX:hashCode=4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么使用：
如数据结构Map，键值对的结构，通过一个key，来快速的确定一个value，通常用于快速查找的场景。但是这个key如何设置呢，以便快速的在数据结构中查找。比如简单的通过一个用户id，来确定一个用户，在这个时候，id就可以很快速的在数组中获得value。&lt;!-- raw HTML omitted --&gt;
但是在复杂的情况，如何通过一个字符串来确定一个对象呢，字符串通过数组查找是实现不了的吧。所以对字符串进行散列，散列的意思就是将一个元素转换为一个整数，通过这个整数尽可能地能够代表这个元素。所以在使用Map的时候，如果使用字符串作为key，在存入的时候，将这个元素散列，就可以快速的查找value了。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;和equals()的关系：
散列会有问题，每个元素不可能散列到不同的整数，总会有冲突的，所以散列码hashcode相等不代表元素就相等。所以还是要采用equals来具体的判断元素是否相等。在Java Map中，都是先通过hashcode插入元素，不相等的hashcode视为不相等的元素会直接添加，如果hashcode相等，再通过equasl方法判断是否真的相等，相等就不加入了。&lt;!-- raw HTML omitted --&gt;
而且速度还会比equals判断快，在中间加入一层hashcode的判断，可以提升性能，所以设计的优秀的散列函数是非常有必要的。&lt;/p&gt;
&lt;h3 id=&#34;重写之equals和hashcode&#34;&gt;重写之equals()和hashCode()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hashCode，相同的元素的散列码应该是相等的，不相同的元素的散列码极小可能是相同的&lt;/li&gt;
&lt;li&gt;散列码关注的是性能，更倾向于 不相等的元素应该产生不相等的散列码&lt;/li&gt;
&lt;li&gt;重写equals()方法没有重写hashCode()，会出现相同的元素产生的散列码不同，然后添加到map中，第二次获取不到&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;构造之后不可以改变
&lt;ul&gt;
&lt;li&gt;因为字符数组是private修饰的，然后没有对外提供public方法改变&lt;/li&gt;
&lt;li&gt;而且final修改String类，不可以被继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每次String类型的对象操作时，都会产生一个新的String对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;StringBuilder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程不安全，提供了修改字符串的操作&lt;/li&gt;
&lt;li&gt;toString方法，返回一个String对象&lt;/li&gt;
&lt;li&gt;修改操作是扩大字符数组的容量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;StringBuffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全，public方法全是synchronized，也提供了修改字符串的操作&lt;/li&gt;
&lt;li&gt;toString方法，返回一个String对象&lt;/li&gt;
&lt;li&gt;修改操作是扩大字符数组的容量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lsquo;+&amp;rsquo; 和 StringBuilder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+操作，每次都会创建一个StringBuilder对象操作append，然后返回一个String&lt;/li&gt;
&lt;li&gt;StringBuilder不会&lt;/li&gt;
&lt;/ul&gt;
- https://github.com/yushan-blog/xiaosong.github.io.git/java/basic/basicknowledge/java_basic/ - This is a customized copyright.</description>
        </item>
    
    
  </channel>
</rss> 